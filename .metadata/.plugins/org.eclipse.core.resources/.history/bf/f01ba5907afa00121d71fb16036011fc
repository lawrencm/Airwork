package com.lawrencm.mergedocs;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.JAXBElement;

import org.alfresco.model.ContentModel;
import org.alfresco.repo.action.ParameterDefinitionImpl;
import org.alfresco.repo.action.executer.ActionExecuterAbstractBase;
import org.alfresco.service.cmr.action.Action;
import org.alfresco.service.cmr.action.ParameterDefinition;
import org.alfresco.service.cmr.dictionary.DataTypeDefinition;
import org.alfresco.service.cmr.model.FileFolderService;
import org.alfresco.service.cmr.model.FileInfo;
import org.alfresco.service.cmr.repository.ContentReader;
import org.alfresco.service.cmr.repository.ContentService;
import org.alfresco.service.cmr.repository.ContentWriter;
import org.alfresco.service.cmr.repository.NodeRef;
import org.alfresco.service.cmr.repository.NodeService;
import org.alfresco.service.namespace.QName;
import org.apache.log4j.Logger;
import org.docx4j.fonts.IdentityPlusMapper;
import org.docx4j.jaxb.Context;
import org.docx4j.openpackaging.exceptions.Docx4JException;
import org.docx4j.openpackaging.exceptions.InvalidFormatException;
import org.docx4j.openpackaging.io.SaveToZipFile;
import org.docx4j.openpackaging.packages.WordprocessingMLPackage;
import org.docx4j.openpackaging.parts.WordprocessingML.MainDocumentPart;
import org.docx4j.openpackaging.parts.relationships.Namespaces;
import org.docx4j.wml.Body;
import org.docx4j.wml.CTSettings;
import org.docx4j.wml.CTView;
import org.docx4j.wml.FldChar;
import org.docx4j.wml.ObjectFactory;
import org.docx4j.wml.P;
import org.docx4j.wml.R;
import org.docx4j.wml.STFldCharType;
import org.docx4j.wml.STView;
import org.docx4j.wml.Text;

import com.plutext.merge.BlockRange;
import com.plutext.merge.BlockRange.HfBehaviour;
import com.plutext.merge.BlockRange.NumberingHandler;
import com.plutext.merge.BlockRange.SectionBreakBefore;
import com.plutext.merge.DocumentBuilder;

public class mergeDocsActionExecuter extends ActionExecuterAbstractBase {

	// private ServiceRegistry serviceRegistry;
	private NodeService nodeService;
	private ContentService contentService;
	private FileFolderService fileFolderService;
	// private OpenOfficeConnection connection;
	// private MimetypeService mimetypeService;

	public static final String testString = "mattsTest";

	/** Content Service */
	// ContentService contentService = (ContentService)
	// context.getBean("contentService");
	// ContentService contentService = this.a

	static Logger log = Logger.getLogger(mergeDocsActionExecuter.class);

	public void setNodeService(NodeService nodeService) {
		this.nodeService = nodeService;
	}

	// public void setServiceRegistry(ServiceRegistry serviceRegistry) {
	// this.serviceRegistry = serviceRegistry;
	// }

	public void setFileFolderService(FileFolderService fileFolderService) {
		this.fileFolderService = fileFolderService;
	}

	/**
	 * Set the content service
	 * 
	 * @param contentService
	 *            the content service
	 */
	public void setContentService(ContentService contentService) {
		this.contentService = contentService;
	}

	/*
	 * @param mimetypeService the mimetype service. Set this if required.
	 */
	// public void setMimetypeService(MimetypeService mimetypeService) {
	// this.mimetypeService = mimetypeService;
	// }
	//
	// public void setConnection(OpenOfficeConnection connection) {
	// this.connection = connection;
	// }

	@Override
	protected void executeImpl(Action action, NodeRef nodeRef) {
		ArrayList<NodeRef> nodesToMerge = (ArrayList<NodeRef>) action
				.getParameterValue("nodesToMerge");
		String newNodeName = (String) action.getParameterValue("documentName");
		// action.getParameterValue("documentName");

		// Create list of docx packages to merge
		// List<WordprocessingMLPackage> wmlPkgList = new
		// ArrayList<WordprocessingMLPackage>();

		System.out.println("\n\n** STARTING DOCMERGE **\n ");

		List<BlockRange> blockRanges = new ArrayList<BlockRange>();

		for (int i = 0; i < nodesToMerge.size(); i++) {
			// String filename = BASE_DIR + sourceDocxNames[i] ;
			NodeRef nr = nodesToMerge.get(i);

			String file_name = (String) nodeService.getProperty(nr,
					ContentModel.PROP_NAME);

			System.out.println("Loading " + file_name);

			ContentReader reader = contentService.getReader(nr,
					ContentModel.PROP_CONTENT);
			InputStream originalInputStream = reader.getContentInputStream();

			try {
				BlockRange block = new BlockRange(
						WordprocessingMLPackage.load(originalInputStream));
				blockRanges.add(block);

				// blockRanges.add(block);

				// No pages breaks
				block.setSectionBreakBefore(SectionBreakBefore.CONTINUOUS);
				block.setNumberingHandler(NumberingHandler.USE_EARLIER);

				// if you want no headers on the pages from docx2:
				block.setHeaderBehaviour(HfBehaviour.NONE);

			} catch (Docx4JException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			// try {
			// wmlPkgList.add(WordprocessingMLPackage.load(originalInputStream));
			//
			//
			// } catch (Docx4JException e) {
			// // TODO Auto-generated catch block
			// e.printStackTrace();
			// }
		}

		// Perform the actual merge
		File file;
		try {
			file = File.createTempFile("wordexport-", ".docx");

			DocumentBuilder documentBuilder = new DocumentBuilder();
			// documentBuilder.setRetainMacros(blockRanges.get(1));

			//
			WordprocessingMLPackage output = documentBuilder
					.buildOpenDocument(blockRanges);
			// set up for TOC
			// MainDocumentPart documentPart = output.getMainDocumentPart();
			// org.docx4j.wml.Document wmlDocumentEl = (org.docx4j.wml.Document)
			// documentPart.getJaxbElement();
			// Body body = wmlDocumentEl.getBody();
			// ObjectFactory factory = Context.getWmlObjectFactory();
			//
			// CTView view = Context.getWmlObjectFactory().createCTView();
			// view.setVal(STView.PRINT);
			/*
			 * Create the following:
			 * 
			 * <w:p> <w:r> <w:fldChar w:dirty="true" w:fldCharType="begin"/>
			 * <w:instrText xml:space="preserve">TOC \o &quot;1-3&quot; \h \z \
			 * u \h</w:instrText> </w:r> <w:r/> <w:r> <w:fldChar
			 * w:fldCharType="end"/> </w:r> </w:p>
			 */

			// w:updateSettings w:val="true"

			// P paragraphForTOC = factory.createP();
			// R r = factory.createR();
			//
			// FldChar fldchar = factory.createFldChar();
			// fldchar.setFldCharType(STFldCharType.BEGIN);
			// fldchar.setDirty(true);
			// r.getContent().add(getWrappedFldChar(fldchar));
			// paragraphForTOC.getContent().add(r);
			//
			// CTSettings us = Context.getWmlObjectFactory().createCTSettings();
			//
			// us.setUpdateFields(null);
			//
			// factory.createSettings(us);
			//
			// R r1 = factory.createR();
			// Text txt = new Text();
			// txt.setSpace("preserve");
			// txt.setValue("TOC \\o \"1-3\" \\h \\z \\u \\h");
			// r.getContent().add(factory.createRInstrText(txt));
			// paragraphForTOC.getContent().add(r1);
			//
			// FldChar fldcharend = factory.createFldChar();
			// fldcharend.setFldCharType(STFldCharType.END);
			// R r2 = factory.createR();
			// r2.getContent().add(getWrappedFldChar(fldcharend));
			// paragraphForTOC.getContent().add(r2);
			//
			// body.getContent().add(paragraphForTOC);

			// output.set

			SaveToZipFile saver = new SaveToZipFile(output);
			saver.save(file);

			QName contentQName = QName
					.createQName("{com.lawrencm.md}compondDocument");

			FileInfo docInfo = fileFolderService.create(nodeRef, newNodeName,
					contentQName);
			NodeRef docRef = docInfo.getNodeRef();
			QName contentQTitle = QName
					.createQName("{http://www.alfresco.org/model/content/1.0}title");
			QName mdQAssoc = QName.createQName("{com.lawrencm.md}createdFrom");

			nodeService.setProperty(docRef, contentQTitle, "New Title Value");
			nodeService.setProperty(docRef, mdQAssoc, nodesToMerge);

			ContentWriter writer = this.contentService.getWriter(docRef,
					ContentModel.PROP_CONTENT, true);
			// File file = new File("/tmp/images/maddie1.jpg");
			// writer.
			writer.setMimetype("application/vnd.openxmlformats-officedocument.wordprocessingml.document");

			// output.setFontMapper(new IdentityPlusMapper());
			// Set up converter
			// org.docx4j.convert.out.pdf.PdfConversion c = new
			// org.docx4j.convert.out.pdf.viaXSLFO.Conversion(output);
			// // Write to output stream
			// OutputStream os = new java.io.FileOutputStream("/tmp/matt" +
			// ".pdf");
			// c.output(os, null);

			writer.putContent(file);

			file.delete();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvalidFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Docx4JException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// try {
		// // Use reflection, so docx4j can be built
		// // by users who don't have the MergeDocx utility
		// Class<?> documentBuilder =
		// Class.forName("com.plutext.merge.DocumentBuilder");
		// // Method method = documentBuilder.getMethod("merge",
		// // wmlPkgList.getClass());
		// Method[] methods = documentBuilder.getMethods();
		// Method method = null;
		// for (int j = 0; j < methods.length; j++) {
		// System.out.println(methods[j].getName());
		// if (methods[j].getName().equals("merge")) {
		// method = methods[j];
		// break;
		// }
		// }
		// if (method == null)
		// throw new NoSuchMethodException();
		//
		//
		// File file = File.createTempFile("wordexport-", ".docx");
		//
		// WordprocessingMLPackage resultPkg = (WordprocessingMLPackage)
		// method.invoke(null, wmlPkgList);
		//
		// // FileOutputStream fos = resultPkg.
		// SaveToZipFile saver = new SaveToZipFile(resultPkg);
		// saver.save( file );

		// OutputStream out = new FileOutputStream(file);
		// out.write(classContent.getBytes());

		// saver.saveFlatOPC(arg0)

		// sve back to a new node

		// writer.

		// clean up

		// out.close();
		// file.delete();

		// if (save) {
		// SaveToZipFile saver = new SaveToZipFile(resultPkg);
		// saver.save(outputfilepath);
		// System.out.println("Generated " + outputfilepath);
		// } else {
		// String result =
		// XmlUtils.marshaltoString(resultPkg.getMainDocumentPart().getJaxbElement(),
		// true, true);
		// System.out.println(result);
		// }

		// } catch (SecurityException e) {
		// e.printStackTrace();
		// } catch (ClassNotFoundException e) {
		// extensionMissing(e);
		// } catch (java.lang.IllegalArgumentException e) {
		// e.printStackTrace();
		// } catch (NoSuchMethodException e) {
		// extensionMissing(e);
		// } catch (IllegalAccessException e) {
		// e.printStackTrace();
		// } catch (InvocationTargetException e) {
		// e.printStackTrace();
		// } catch (FileNotFoundException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// } catch (IOException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// } catch (Docx4JException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// }

	}

	// public static void extensionMissing(Exception e) {
	// System.out.println("\n" + e.getClass().getName() + ": " + e.getMessage()
	// + "\n");
	// System.out.println("* You don't appear to have the MergeDocx paid extension,");
	// System.out.println("* which is necessary to merge docx, or process altChunk.");
	// System.out.println("* Purchases of this extension support the docx4j project.");
	// System.out.println("* Please visit www.plutext.com if you want to buy it.");
	// }

	public static JAXBElement getWrappedFldChar(FldChar fldchar) {

		return new JAXBElement(new javax.xml.namespace.QName(
				Namespaces.NS_WORD12, "fldChar"), FldChar.class, fldchar);

	}

	@Override
	protected void addParameterDefinitions(List<ParameterDefinition> paramList) {

		// Add definitions for action parameters
		paramList.add(new ParameterDefinitionImpl( // Create a new parameter
													// defintion to add to the
													// list
				testString, // The name used to identify the parameter
				DataTypeDefinition.TEXT, // The parameter value type
				false, // Indicates whether the parameter is mandatory
				getParamDisplayLabel("text"))); // The parameters display label
	}

	// Add definitions for action parameters
	// paramList.add( new ParameterDefinitionImpl()); // The parameters
	// display label

}
